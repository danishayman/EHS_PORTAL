@model CLIP.Models.CompetencyModule
@{
    ViewBag.Title = "Add Competency Module";
}

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h4 class="card-title mb-0">Add New Competency Module</h4>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Add", "Competency", FormMethod.Post, new { @class = "needs-validation" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger mb-3" })
                        
                        <div class="mb-3">
                            @Html.LabelFor(m => m.ModuleName, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.ModuleName, new { @class = "form-control", placeholder = "Enter module name" })
                            @Html.ValidationMessageFor(m => m.ModuleName, "", new { @class = "text-danger" })
                        </div>
                        
                        <div class="mb-3">
                            @Html.LabelFor(m => m.Description, new { @class = "form-label" })
                            @Html.TextAreaFor(m => m.Description, new { @class = "form-control", placeholder = "Enter module description", rows = 3 })
                            @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                        </div>
                        
                        <div class="mb-3">
                            @Html.LabelFor(m => m.ValidityMonths, "Validity Period (Years)", new { @class = "form-label" })
                            <div class="d-flex align-items-center mb-2">
                                <div class="form-check me-3">
                                    <input type="checkbox" id="noValidityPeriod" class="form-check-input" />
                                    <label class="form-check-label" for="noValidityPeriod">No validity period</label>
                                </div>
                            </div>
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.ValidityMonths, new { @class = "form-control", type = "number", min = "1", step = "1", placeholder = "Enter validity period" })
                                <span class="input-group-text">years</span>
                            </div>
                            @Html.ValidationMessageFor(m => m.ValidityMonths, "", new { @class = "text-danger" })
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.PointType, "Point Type", new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.PointType, 
                                    new List<SelectListItem> { 
                                        new SelectListItem { Text = "Continuing Professional Development (CPD)", Value = "CPD" },
                                        new SelectListItem { Text = "Continuing Education Program (CEP)", Value = "CEP" }
                                    },
                                    "Select point type", new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.PointType, "", new { @class = "text-danger" })
                            </div>
                            
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.TotalPoints, "Total Points", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.TotalPoints, new { @class = "form-control", type = "number", min = "0", placeholder = "Enter total points" })
                                @Html.ValidationMessageFor(m => m.TotalPoints, "", new { @class = "text-danger" })
                            </div>
                            
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.AnnualPointDeduction, "Annual Point Deduction", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.AnnualPointDeduction, new { @class = "form-control", type = "number", min = "0", placeholder = "Enter deduction points" })
                                @Html.ValidationMessageFor(m => m.AnnualPointDeduction, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        
                        <div class="mt-4 d-flex justify-content-between">
                            <a href="@Url.Action("Index", "Competency")" class="btn btn-outline-secondary">
                                <i class="fas fa-arrow-left me-2"></i>Back to List
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-2"></i>Save Competency Module
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
    
    <script>
        $(document).ready(function() {
            // Convert validity months to years for display
            var validityMonths = $('#ValidityMonths').val();
            if (validityMonths) {
                $('#ValidityMonths').val(Math.floor(validityMonths / 12));
            }
            
            $('#noValidityPeriod').change(function() {
                if($(this).is(':checked')) {
                    $('#ValidityMonths').val('').prop('disabled', true);
                } else {
                    $('#ValidityMonths').prop('disabled', false);
                }
            });
            
            // Set initial state if the model has no validity months
            if (!$('#ValidityMonths').val()) {
                $('#noValidityPeriod').prop('checked', true);
                $('#ValidityMonths').prop('disabled', true);
            }
            
            // Prevent enter key from submitting the form
            $('#ValidityMonths').keydown(function(event) {
                if (event.keyCode === 13) { // Enter key
                    event.preventDefault();
                    return false;
                }
            });
            
            // Only convert years to months when the Save button is clicked
            $('button[type="submit"]').click(function() {
                if (!$('#noValidityPeriod').is(':checked')) {
                    var years = parseInt($('#ValidityMonths').val());
                    if (!isNaN(years)) {
                        $('#ValidityMonths').val(years * 12);
                    }
                }
            });
        });
    </script>
} 