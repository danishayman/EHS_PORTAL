@model IEnumerable<EHS_PORTAL.Areas.CLIP.Models.CompetencyModule>
@{
    ViewBag.Title = "Competencies";
    
    // Collect all buildings for filtering
    var allBuildings = new HashSet<string>();
    foreach (var module in Model)
    {
        foreach (var userComp in module.UserCompetencies)
        {
            if (!string.IsNullOrEmpty(userComp.Building))
            {
                foreach (var building in userComp.Building.Split(','))
                {
                    allBuildings.Add(building.Trim());
                }
            }
        }
    }
    var buildingsList = allBuildings.OrderBy(b => b).ToList();
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h2 fw-bold">Competent Person</h1>
        @if (User.IsInRole("Admin"))
        {
            <a href="@Url.Action("Assign", "UserCompetency")" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>Assign Competency
            </a>
        }
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <p class="mb-0">No competency modules have been created yet.</p>
        </div>
    }
    else
    {
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-light p-3">
                <h5 class="card-title mb-3">Filter & Sort</h5>
                <div class="row g-3">
                    <div class="col-md-5">
                        <label for="searchInput" class="form-label small text-muted">Search</label>
                        <div class="input-group">
                            <span class="input-group-text bg-white text-muted">
                                <i class="fas fa-search"></i>
                            </span>
                            <input type="text" id="searchInput" class="form-control border-start-0" placeholder="Search by module or description...">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label for="statusFilter" class="form-label small text-muted">Filter by</label>
                        <select id="statusFilter" class="form-select">
                            <option value="">All Modules</option>
                            <option value="with-users">With Assigned Users</option>
                            <option value="no-users">No Assigned Users</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="buildingFilter" class="form-label small text-muted">Building</label>
                        <select id="buildingFilter" class="form-select">
                            <option value="">All Buildings</option>
                            @foreach (var building in buildingsList)
                            {
                                <option value="@building">@building</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="sortOrder" class="form-label small text-muted">Sort by</label>
                        <select id="sortOrder" class="form-select">
                            <option value="name">Module Name</option>
                            <option value="Active">Active Count</option>
                            <option value="expiry">Expiry Date</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <div class="accordion" id="competencyAccordion">
                @foreach (var module in Model)
                {
                    var userCount = module.UserCompetencies.Count();
                    var ActiveCount = module.UserCompetencies.Count(uc => uc.Status == "Active");
                    var moduleId = $"module-{module.Id}";
                    
                    <div class="accordion-item border-0 border-bottom" data-module="@module.ModuleName" data-users="@userCount">
                        <h2 class="accordion-header" id="heading-@moduleId">
                            <button class="accordion-button collapsed py-3" type="button" data-bs-toggle="collapse" data-bs-target="#@moduleId" aria-expanded="false" aria-controls="@moduleId">
                                <div class="d-flex justify-content-between align-items-center w-100 me-3">
                                    <div class="d-flex flex-column">
                                        <div class="d-flex align-items-center">
                                            <strong class="fs-5 text-dark me-2">@module.ModuleName</strong>
                                            @if (!string.IsNullOrEmpty(module.CompetencyType))
                                            {
                                                <span class="badge bg-info text-dark rounded-pill">@module.CompetencyType</span>
                                            }
                                        </div>
                                        @if (!string.IsNullOrEmpty(module.Description))
                                        {
                                            <span class="text-muted small">@module.Description</span>
                                        }
                                    </div>
                                    <div class="d-flex gap-2">
                                        <span class="badge bg-success rounded-pill">@ActiveCount Active</span>
                                    </div>
                                </div>
                            </button>
                        </h2>
                        <div id="@moduleId" class="accordion-collapse collapse" aria-labelledby="heading-@moduleId" data-bs-parent="#competencyAccordion">
                            <div class="accordion-body p-0">
                                @if (module.UserCompetencies.Any())
                                {
                                    <div class="table-responsive">
                                        <table class="table table-hover mb-0">
                                            <thead class="table-light">
                                                <tr>
                                                    <th class="ps-3">User</th>
                                                    <th>Status</th>
                                                    <th>Completion Date</th>
                                                    <th>Expiry Date</th>
                                                    <th>Buildings</th>
                                                    @if (User.IsInRole("Admin"))
                                                    {
                                                        <th class="text-end pe-3">Actions</th>
                                                    }
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var userCompetency in module.UserCompetencies.OrderBy(uc => uc.User.UserName))
                                                {
                                                    <tr>
                                                        <td class="ps-3">
                                                            <a href="@Url.Action("UserCompetencies", "UserCompetency", new { userId = userCompetency.UserId })" class="fw-medium text-decoration-none">
                                                                @userCompetency.User.UserName
                                                            </a>
                                                        </td>
                                                        <td>
                                                            @switch (userCompetency.Status)
                                                            {
                                                                case "Pending":
                                                                    <span class="badge bg-secondary">Pending</span>
                                                                    break;
                                                                case "Active":
                                                                    <span class="badge bg-success">Active</span>
                                                                    break;
                                                                default:
                                                                    <span class="badge bg-secondary">@userCompetency.Status</span>
                                                                    break;
                                                            }
                                                        </td>
                                                        <td>@(userCompetency.CompletionDate.HasValue ? userCompetency.CompletionDate.Value.ToShortDateString() : "-")</td>
                                                        <td>
                                                            @if (userCompetency.ExpiryDate.HasValue)
                                                            {
                                                                if (userCompetency.ExpiryDate.Value < DateTime.Today)
                                                                {
                                                                    <span class="badge bg-danger">@userCompetency.ExpiryDate.Value.ToShortDateString()</span>
                                                                }
                                                                else if (userCompetency.ExpiryDate.Value < DateTime.Today.AddMonths(1))
                                                                {
                                                                    <span class="badge bg-warning text-dark">@userCompetency.ExpiryDate.Value.ToShortDateString()</span>
                                                                }
                                                                else
                                                                {
                                                                    @userCompetency.ExpiryDate.Value.ToShortDateString()
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <span>-</span>
                                                            }
                                                        </td>
                                                        <td>
                                                            @if (!string.IsNullOrEmpty(userCompetency.Building))
                                                            {
                                                                var buildings = userCompetency.Building.Split(',');
                                                                foreach (var building in buildings)
                                                                {
                                                                    <span class="badge bg-info text-dark rounded-pill me-1">@building.Trim()</span>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <span class="text-muted">-</span>
                                                            }
                                                        </td>
                                                        @if (User.IsInRole("Admin"))
                                                        {
                                                            <td class="text-end pe-3">
                                                                <div class="btn-group">
                                                                    <a href="@Url.Action("Edit", "UserCompetency", new { id = userCompetency.Id })" class="btn btn-sm btn-outline-primary">
                                                                        <i class="fas fa-edit"></i>
                                                                    </a>
                                                                    @using (Html.BeginForm("Delete", "UserCompetency", new { id = userCompetency.Id }, FormMethod.Post, new { style = "display:inline;" }))
                                                                    {
                                                                        @Html.AntiForgeryToken()
                                                                        <button type="submit" class="btn btn-sm btn-outline-danger" 
                                                                                onclick="return confirm('Are you sure you want to remove this competency assignment? This action cannot be undone.');">
                                                                            <i class="fas fa-trash"></i>
                                                                        </button>
                                                                    }
                                                                </div>
                                                            </td>
                                                        }
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-light m-3">
                                        <p class="mb-0">No users have been assigned to this competency module yet.</p>
                                    </div>
                                }
                                
                                @if (User.IsInRole("Admin"))
                                {
                                    <div class="p-3 bg-light border-top">
                                        <a href="@Url.Action("Assign", "UserCompetency")" class="btn btn-sm btn-primary">
                                            <i class="fas fa-plus me-1"></i>Assign to User
                                        </a>
                                        <a href="@Url.Action("Edit", "Competency", new { id = module.Id })" class="btn btn-sm btn-outline-secondary ms-2">
                                            <i class="fas fa-edit me-1"></i>Edit Module
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@section scripts {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
    <script>
        $(document).ready(function () {
            // Search filtering
            $("#searchInput").on("keyup", function () {
                filterModules();
            });

            // Status filtering
            $("#statusFilter").on("change", function () {
                filterModules();
            });
            
            // Building filtering
            $("#buildingFilter").on("change", function () {
                filterModules();
            });

            // Sorting
            $("#sortOrder").on("change", function () {
                sortModules();
            });

            function filterModules() {
                var searchValue = $("#searchInput").val().toLowerCase();
                var statusFilter = $("#statusFilter").val();
                var buildingFilter = $("#buildingFilter").val();

                // First hide all items
                $(".accordion-item").hide();
                
                // Then show matching items
                $(".accordion-item").each(function () {
                    var $item = $(this);
                    var moduleName = $item.data("module").toLowerCase();
                    var moduleDesc = $item.find(".text-muted").text().toLowerCase();
                    var userCount = parseInt($item.data("users"));
                    var hasBuilding = false;
                    
                    // Check text match
                    var textMatch = moduleName.indexOf(searchValue) > -1 || moduleDesc.indexOf(searchValue) > -1;
                    
                    // Check status match
                    var statusMatch = true;
                    if (statusFilter === "with-users" && userCount === 0) {
                        statusMatch = false;
                    } else if (statusFilter === "no-users" && userCount > 0) {
                        statusMatch = false;
                    }
                    
                    // Check building match
                    var buildingMatch = true;
                    if (buildingFilter !== "") {
                        buildingMatch = false;
                        $item.find(".badge.bg-info").each(function() {
                            if ($(this).text().trim() === buildingFilter) {
                                buildingMatch = true;
                                return false; // break the loop
                            }
                        });
                    }
                    
                    // Show if all conditions match
                    if (textMatch && statusMatch && buildingMatch) {
                        $item.show();
                    }
                });
                
                // Show a message if no results
                if ($(".accordion-item:visible").length === 0) {
                    if ($("#no-results-message").length === 0) {
                        $("#competencyAccordion").append(
                            '<div id="no-results-message" class="alert alert-info m-3">No modules match your filter criteria.</div>'
                        );
                    }
                } else {
                    $("#no-results-message").remove();
                }
            }

            function sortModules() {
                var sortBy = $("#sortOrder").val();
                var items = $(".accordion-item").toArray();
                
                items.sort(function(a, b) {
                    if (sortBy === "name") {
                        var keyA = $(a).data("module").toLowerCase();
                        var keyB = $(b).data("module").toLowerCase();
                        return keyA > keyB ? 1 : keyA < keyB ? -1 : 0;
                    } 
                    else if (sortBy === "Active") {
                        var keyA = $(a).find(".badge.bg-success").text().split(" ")[0];
                        var keyB = $(b).find(".badge.bg-success").text().split(" ")[0];
                        return parseInt(keyB) - parseInt(keyA); // Sort by Active count descending
                    }
                    else if (sortBy === "expiry") {
                        // Find earliest expiry date in each module
                        function getEarliestExpiry(item) {
                            var earliestDate = null;
                            $(item).find('tr').each(function() {
                                var expiryText = $(this).find('td:nth-child(4)').text().trim();
                                if (expiryText !== '-') {
                                    var dateParts = expiryText.split('/');
                                    if (dateParts.length === 3) {
                                        var dateObj = new Date(dateParts[2], dateParts[1]-1, dateParts[0]);
                                        if (!earliestDate || dateObj < earliestDate) {
                                            earliestDate = dateObj;
                                        }
                                    }
                                }
                            });
                            return earliestDate || new Date(9999, 11, 31); // Far future date if no expiry
                        }
                        
                        var dateA = getEarliestExpiry(a);
                        var dateB = getEarliestExpiry(b);
                        return dateA - dateB; // Sort by earliest expiry first
                    }
                });
                
                $.each(items, function(index, item) {
                    $("#competencyAccordion").append(item);
                });
            }
            
            // Initialize filters on page load
            filterModules();
        });
    </script>
} 