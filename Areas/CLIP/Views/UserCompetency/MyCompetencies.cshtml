@model IEnumerable<EHS_PORTAL.Areas.CLIP.Models.UserCompetency>
@{
    ViewBag.Title = "My Competencies";
    
    // Get the current user from the first competency record
    var currentUser = Model.FirstOrDefault()?.User;
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>My Competencies</h1>
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <p class="mb-0">You don't have any competencies assigned yet. Please contact your administrator to assign competencies to you.</p>
        </div>
    }
    else
    {
        if (currentUser != null)
        {
            <div class="row mb-4">
                <div class="col-md-12">
                    <div class="card shadow-sm">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Professional Development Points</h5>
                        </div>
                        <div class="card-body">
                            <div class="row text-center">
                                <div class="col-md-4">
                                    <div class="d-flex flex-column align-items-center">
                                        <div class="display-2 text-primary fw-bold">@(currentUser.Atom_CEP ?? 0)</div>
                                        <span class="fs-5">ATOM CEP Points</span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="d-flex flex-column align-items-center">
                                        <div class="display-2 text-primary fw-bold">@(currentUser.DOE_CPD ?? 0)</div>
                                        <span class="fs-5">DOE CPD Points</span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="d-flex flex-column align-items-center">
                                        <div class="display-2 text-primary fw-bold">@(currentUser.Dosh_CEP ?? 0)</div>
                                        <span class="fs-5">DOSH CEP Points</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Competency Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-md-3">
                                <div class="d-flex flex-column align-items-center">
                                    <div class="display-4">@Model.Count()</div>
                                    <span>Total</span>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="d-flex flex-column align-items-center">
                                    <div class="display-4 text-success">@Model.Count(uc => uc.Status == "Active")</div>
                                    <span>Active</span>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="d-flex flex-column align-items-center">
                                    <div class="display-4 text-info">@Model.Count(uc => uc.Status == "Pending")</div>
                                    <span>Pending</span>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="d-flex flex-column align-items-center">
                                    <div class="display-4 text-danger">@Model.Count(uc => uc.Status == "Expired")</div>
                                    <span>Expired</span>
                                </div>
                            </div>
                                                </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card shadow-sm mb-4">
            <div class="card-header bg-light">
                <div class="row">
                    <div class="col-md-6">
                        <h5 class="mb-0">Active Competencies</h5>
                    </div>
                    <div class="col-md-6">
                        <input type="text" id="searchInput" class="form-control" placeholder="Search by module or status...">
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Competency Module</th>
                            <th>Status</th>
                            <th>Completion Date</th>
                            <th>Expiry Date</th>
                            <th>Buildings</th>
                        </tr>
                    </thead>
                    <tbody id="competencyTableBody">
                        @foreach (var item in Model.Where(c => c.Status != "Expired"))
                        {
                            <tr data-module="@item.CompetencyModule.ModuleName" data-status="@item.Status">
                                <td>
                                    <div class="fw-bold fs-5">@item.CompetencyModule.ModuleName</div>
                                </td>
                                <td>
                                    @switch (item.Status)
                                    {
                                        case "Expired":
                                            <span class="badge bg-secondary">Expired</span>
                                            break;
                                        case "Pending":
                                            <span class="badge bg-info">Pending</span>
                                            break;
                                        case "Active":
                                            <span class="badge bg-success">Active</span>
                                            break;
                                    }
                                </td>
                                <td>@(item.CompletionDate.HasValue ? item.CompletionDate.Value.ToShortDateString() : "-")</td>
                                <td>
                                    @if (item.ExpiryDate.HasValue)
                                    {
                                        if (item.ExpiryDate.Value < DateTime.Today)
                                        {
                                            <span class="text-danger">@item.ExpiryDate.Value.ToShortDateString()</span>
                                        }
                                        else if (item.ExpiryDate.Value < DateTime.Today.AddMonths(1))
                                        {
                                            <span class="text-warning">@item.ExpiryDate.Value.ToShortDateString()</span>
                                        }
                                        else
                                        {
                                            @item.ExpiryDate.Value.ToShortDateString()
                                        }
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.Building))
                                    {
                                        var buildings = item.Building.Split(',');
                                        foreach (var building in buildings)
                                        {
                                            <span class="badge bg-info text-dark me-1">@building</span>
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        @* Check for expired competencies *@
        if (Model.Any(c => c.Status == "Expired"))
        {
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Expired Competencies</h5>
                </div>
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Competency Module</th>
                                <th>Status</th>
                                <th>Completion Date</th>
                                <th>Expiry Date</th>
                                <th>Buildings</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.Where(c => c.Status == "Expired"))
                            {
                                <tr>
                                    <td>
                                        <div class="fw-bold fs-5">@item.CompetencyModule.ModuleName</div>
                                    </td>
                                    <td>
                                        <span class="badge bg-danger">Expired</span>
                                    </td>
                                    <td>@(item.CompletionDate.HasValue ? item.CompletionDate.Value.ToShortDateString() : "-")</td>
                                    <td>
                                        @if (item.ExpiryDate.HasValue)
                                        {
                                            <span class="text-danger">@item.ExpiryDate.Value.ToShortDateString()</span>
                                        }
                                        else
                                        {
                                            <span class="text-danger">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(item.Building))
                                        {
                                            var buildings = item.Building.Split(',');
                                            foreach (var building in buildings)
                                            {
                                                <span class="badge bg-info text-dark me-1">@building</span>
                                            }
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    }
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            // Search filtering
            $("#searchInput").on("keyup", function () {
                var value = $(this).val().toLowerCase();
                
                $("#competencyTableBody tr").filter(function () {
                    var moduleMatch = $(this).data("module").toLowerCase().indexOf(value) > -1;
                    var statusMatch = $(this).data("status").toLowerCase().indexOf(value) > -1;
                    $(this).toggle(moduleMatch || statusMatch);
                });
            });
        });
    </script>
} 