@model List<EHS_PORTAL.Areas.CLIP.Models.MonitoringNotification>

@{
    var notificationCount = Model?.Count(n => !n.IsRead) ?? 0;
    var hasNotifications = Model?.Count > 0;
    var unreadNotifications = notificationCount > 0;
}

<div class="notification-toggle-container">
    <button class="notification-toggle-btn" id="notificationToggleBtn" title="Toggle Notifications">
        <span class="bell-wrapper">
            <i class="fas fa-bell"></i>
            @if (unreadNotifications)
            {
                <span class="notification-badge">@notificationCount</span>
            }
        </span>
    </button>
</div>

<div class="notification-panel" id="notificationsPanel">
    <div class="notification-header">
        <h6 class="m-0">
            <i class="fas fa-bell me-2"></i> Notifications
            @if (unreadNotifications)
            {
                <span class="badge bg-danger ms-1">@notificationCount</span>
            }
        </h6>
        <div>
            @if (unreadNotifications)
            {
                <button type="button" class="btn btn-sm btn-outline-secondary me-2" id="markAllReadBtn">
                    <i class="fas fa-check-double"></i> Mark all read
                </button>
            }
            <button class="btn-close notification-close" id="notificationCloseBtn"></button>
        </div>
    </div>
    <div class="notification-body" id="notificationsList">
        @if (hasNotifications)
        {
            <div class="notification-list">
                @foreach (var notification in Model)
                {
                    <div class="notification-item-wrapper">
                        <a href="@notification.Link" class="notification-item @(notification.IsRead ? "notification-read" : "notification-unread")" data-id="@notification.ItemId">
                            <div class="notification-icon @notification.BadgeClass">
                                <i class="fas @notification.IconClass"></i>
                            </div>
                            <div class="notification-content">
                                <div class="notification-title">
                                    <span>@notification.Title</span>
                                    <small>@notification.CreatedDate.ToString("MMM dd, HH:mm")</small>
                                </div>
                                <p class="notification-message">@notification.Message</p>
                            </div>
                        </a>
                        <button type="button" class="btn btn-sm btn-light mark-read-btn" title="Mark as read" data-id="@notification.ItemId">
                            <i class="fas fa-check"></i>
                        </button>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-3">
                <i class="fas fa-check-circle text-success fa-2x mb-2"></i>
                <p class="mb-0">No pending notifications</p>
            </div>
        }
    </div>
</div>

<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function() {
        var notificationsPanel = document.getElementById('notificationsPanel');
        var notificationToggleBtn = document.getElementById('notificationToggleBtn');
        var notificationCloseBtn = document.getElementById('notificationCloseBtn');
        var markAllReadBtn = document.getElementById('markAllReadBtn');
        
        if (!notificationsPanel || !notificationToggleBtn) return;
        
        // Initially hide the panel
        notificationsPanel.style.display = 'none';
        
        // Toggle notifications panel when the bell icon is clicked
        notificationToggleBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            if (notificationsPanel.style.display === 'none') {
                notificationsPanel.style.display = 'block';
                localStorage.setItem('notificationsPanelVisible', 'true');
            } else {
                notificationsPanel.style.display = 'none';
                localStorage.setItem('notificationsPanelVisible', 'false');
            }
        });
        
        // Close button event
        if (notificationCloseBtn) {
            notificationCloseBtn.addEventListener('click', function() {
                notificationsPanel.style.display = 'none';
                localStorage.setItem('notificationsPanelVisible', 'false');
            });
        }
        
        // Close panel when clicking outside
        document.addEventListener('click', function(e) {
            if (notificationsPanel.style.display !== 'none') {
                if (!notificationsPanel.contains(e.target) && e.target !== notificationToggleBtn) {
                    notificationsPanel.style.display = 'none';
                    localStorage.setItem('notificationsPanelVisible', 'false');
                }
            }
        });
        
        // Check if we have saved the visibility state in localStorage
        var savedVisibility = localStorage.getItem('notificationsPanelVisible');
        if (savedVisibility === 'true') {
            notificationsPanel.style.display = 'block';
        }
        
        // Handle mark as read buttons
        var markReadButtons = document.querySelectorAll('.mark-read-btn');
        markReadButtons.forEach(function(btn) {
            btn.addEventListener('click', function(e) {
                e.stopPropagation();
                e.preventDefault();
                
                var notificationId = this.getAttribute('data-id');
                markNotificationAsRead(notificationId, this);
            });
        });
        
        // Mark all as read
        if (markAllReadBtn) {
            markAllReadBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                markAllNotificationsAsRead();
            });
        }
        
        // Function to mark a notification as read
        function markNotificationAsRead(notificationId, button) {
            // Create anti-forgery token form data
            var token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            var formData = new FormData();
            formData.append('id', notificationId);
            formData.append('__RequestVerificationToken', token);
            
            // Send AJAX request
            fetch('@Url.Action("MarkNotificationAsRead", "PlantMonitoring")', {
                method: 'POST',
                body: formData,
                credentials: 'same-origin'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Mark as read in UI
                    var notificationItem = button.closest('.notification-item-wrapper').querySelector('.notification-item');
                    notificationItem.classList.remove('notification-unread');
                    notificationItem.classList.add('notification-read');
                    
                    // Hide the button
                    button.style.display = 'none';
                    
                    // Update badge count
                    updateNotificationCount();
                }
            })
            .catch(error => {
                console.error('Error marking notification as read:', error);
            });
        }
        
        // Function to mark all notifications as read
        function markAllNotificationsAsRead() {
            // Create anti-forgery token form data
            var token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            var formData = new FormData();
            formData.append('__RequestVerificationToken', token);
            
            // Send AJAX request
            fetch('@Url.Action("ClearAllNotifications", "PlantMonitoring")', {
                method: 'POST',
                body: formData,
                credentials: 'same-origin'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Mark all as read in UI
                    var notificationItems = document.querySelectorAll('.notification-item');
                    notificationItems.forEach(function(item) {
                        item.classList.remove('notification-unread');
                        item.classList.add('notification-read');
                    });
                    
                    // Hide all mark read buttons
                    var markReadButtons = document.querySelectorAll('.mark-read-btn');
                    markReadButtons.forEach(function(btn) {
                        btn.style.display = 'none';
                    });
                    
                    // Hide mark all read button
                    if (markAllReadBtn) {
                        markAllReadBtn.style.display = 'none';
                    }
                    
                    // Update badge count to zero
                    var badge = document.querySelector('.notification-badge');
                    if (badge) {
                        badge.style.display = 'none';
                    }
                }
            })
            .catch(error => {
                console.error('Error marking all notifications as read:', error);
            });
        }
        
        // Function to update notification count
        function updateNotificationCount() {
            var unreadNotifications = document.querySelectorAll('.notification-unread').length;
            var badge = document.querySelector('.notification-badge');
            
            if (unreadNotifications > 0) {
                if (badge) {
                    badge.textContent = unreadNotifications;
                } else {
                    var newBadge = document.createElement('span');
                    newBadge.className = 'notification-badge';
                    newBadge.textContent = unreadNotifications;
                    document.querySelector('.bell-wrapper').appendChild(newBadge);
                }
            } else {
                if (badge) {
                    badge.style.display = 'none';
                }
                
                // Hide mark all read button if no unread notifications
                if (markAllReadBtn) {
                    markAllReadBtn.style.display = 'none';
                }
            }
        }
    });
</script>

<style>
    /* Notification panel styles */
    .notification-toggle-container {
        position: relative;
        z-index: 1001;
    }
    
    .notification-toggle-btn {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        background: linear-gradient(145deg, #ffffff, #f0f0f0);
        box-shadow: 5px 5px 10px #d1d1d1, -5px -5px 10px #ffffff;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        position: fixed;
        right: 20px;
        top: 80px;
        transition: all 0.3s ease;
        cursor: pointer;
        z-index: 1001;
    }
    
    .notification-toggle-btn:hover {
        transform: scale(1.05);
        box-shadow: 6px 6px 12px #d1d1d1, -6px -6px 12px #ffffff;
    }
    
    .notification-toggle-btn:active {
        transform: scale(0.95);
        box-shadow: inset 2px 2px 5px #d1d1d1, inset -2px -2px 5px #ffffff;
    }
    
    .bell-wrapper {
        position: relative;
        color: #4e73df;
        font-size: 1.2rem;
    }
    
    .notification-badge {
        position: absolute;
        top: -10px;
        right: -10px;
        font-size: 0.65rem;
        background-color: #e74a3b;
        color: white;
        border-radius: 50%;
        width: 18px;
        height: 18px;
        display: flex;
        justify-content: center;
        align-items: center;
        border: 2px solid white;
    }
    
    .notification-panel {
        position: fixed;
        top: 130px;
        right: 20px;
        width: 350px;
        max-width: 90vw;
        max-height: 70vh;
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.15);
        z-index: 1000;
        overflow: hidden;
        display: none;
        border: 1px solid rgba(0,0,0,0.08);
    }
    
    .notification-header {
        padding: 15px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .notification-header h6 {
        font-weight: 600;
        color: #5a5c69;
    }
    
    .notification-close {
        font-size: 0.8rem;
        padding: 0.2rem;
    }
    
    .notification-body {
        max-height: calc(70vh - 50px);
        overflow-y: auto;
    }
    
    .notification-list {
        padding: 0;
    }
    
    .notification-item-wrapper {
        position: relative;
        display: flex;
        align-items: center;
        border-bottom: 1px solid #f0f0f0;
    }
    
    .notification-item {
        display: flex;
        padding: 15px;
        transition: background-color 0.2s;
        text-decoration: none;
        color: inherit;
        flex: 1;
    }
    
    .notification-item:hover {
        background-color: #f8f9fa;
        text-decoration: none;
        color: inherit;
    }
    
    .notification-unread {
        border-left: 3px solid #4e73df;
        background-color: rgba(78, 115, 223, 0.05);
        font-weight: 500;
    }
    
    .notification-read {
        opacity: 0.75;
        border-left: 3px solid transparent;
    }
    
    .notification-icon {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 12px;
        color: white;
    }
    
    .notification-content {
        flex: 1;
    }
    
    .notification-title {
        display: flex;
        justify-content: space-between;
        margin-bottom: 4px;
    }
    
    .notification-title span {
        font-weight: 600;
        font-size: 0.9rem;
    }
    
    .notification-title small {
        color: #6c757d;
        font-size: 0.75rem;
    }
    
    .notification-message {
        font-size: 0.85rem;
        margin-bottom: 0;
        color: #495057;
    }
    
    .mark-read-btn {
        margin-right: 8px;
        padding: 3px 6px;
        font-size: 0.7rem;
        display: none;
        border-radius: 50%;
        width: 25px;
        height: 25px;
        line-height: 1;
        padding: 0;
    }
    
    .notification-unread + .mark-read-btn,
    .notification-item-wrapper:hover .mark-read-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }
    
    /* Badge background colors */
    .bg-warning {
        background-color: #f6c23e !important;
    }
    
    .bg-info {
        background-color: #36b9cc !important;
    }
    
    .bg-success {
        background-color: #1cc88a !important;
    }
    
    .bg-primary {
        background-color: #4e73df !important;
    }
    
    .bg-danger {
        background-color: #e74a3b !important;
    }
    
    /* Responsive adjustments */
    media (max-width: 576px) {
        .notification-panel {
            width: 300px;
            max-width: calc(100vw - 30px);
            right: 10px;
        }
        
        .notification-toggle-btn {
            right: 10px;
            width: 40px;
            height: 40px;
        }
        
        .bell-wrapper {
            font-size: 1rem;
        }
    }
</style> 