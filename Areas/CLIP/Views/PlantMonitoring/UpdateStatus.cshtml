@model EHS_PORTAL.Areas.CLIP.Models.PlantMonitoring

@{
    ViewBag.Title = "Update Monitoring Status";
    var isAdmin = ViewBag.IsAdmin;
    var currentUser = User.Identity.Name;
    
    // Determine which phases are completed
    bool isQuotationCompleted = Model.QuoteCompleteDate.HasValue;
    bool isEprCompleted = Model.EprCompleteDate.HasValue;
    bool isWorkCompleted = Model.WorkCompleteDate.HasValue;
    
    // Determine active tab
    string activeTab = "quotation";
    if (isQuotationCompleted && !isEprCompleted) {
        activeTab = "epr";
    } else if (isQuotationCompleted && isEprCompleted && !isWorkCompleted) {
        activeTab = "work";
    } else if (isQuotationCompleted && isEprCompleted && isWorkCompleted) {
        activeTab = "summary";
    }
}

<h2>Update Monitoring Status</h2>

<div class="row mb-3">
    <div class="col-md-12">
        <div class="alert alert-info">
            <strong>Monitoring:</strong> @Model.Monitoring.MonitoringName |
            <strong>Plant:</strong> @Model.Plant.PlantName |
            <strong>Area:</strong> @(string.IsNullOrEmpty(Model.Area) ? "N/A" : Model.Area) |
            <strong>Process Status:</strong> <span class="badge @Model.ProcStatusCssClass">@Model.ProcStatus</span> |
            <strong>Expiration Status:</strong> <span class="badge @Model.ExpStatusCssClass">@Model.ExpStatus</span>
        </div>
    </div>
</div>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show mb-3" role="alert">
        <strong>Error:</strong> @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show mb-3" role="alert">
        <i class="fas fa-check-circle me-2"></i> @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Expiry Date & Remarks Form -->
@using (Html.BeginForm("UpdateExpiry", "PlantMonitoring", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)

    <div class="row">
        <div class="col-md-12 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Expiry Date & Remarks</h5>
                    <button type="submit" class="btn btn-sm btn-primary" title="Save Expiry & Remarks">
                        <i class="fas fa-save"></i> Save
                    </button>
                </div>
                <div class="card-body">
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Expiry Date:</label>
                        <div class="col-sm-4">
                            @Html.TextBoxFor(model => model.ExpDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                            <small class="form-text text-muted">Will be automatically set based on monitoring frequency when work is completed.</small>
                        </div>
                    </div>
                    
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Remarks:</label>
                        <div class="col-sm-10">
                            @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control", rows = 3 })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Phase Navigation Tabs -->
<div class="row mb-3">
    <div class="col-md-12">
        <ul class="nav nav-tabs" id="phasesTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "quotation" ? "active" : "")" 
                        id="quotation-tab" 
                        data-bs-toggle="tab" 
                        data-bs-target="#quotation" 
                        type="button" 
                        role="tab" 
                        aria-controls="quotation" 
                        aria-selected="@(activeTab == "quotation" ? "true" : "false")">
                    <i class="fas fa-file-invoice-dollar me-1"></i> 1. Quotation Phase
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "epr" ? "active" : "") @(!isQuotationCompleted ? "disabled" : "")" 
                        id="epr-tab" 
                        data-bs-toggle="tab" 
                        data-bs-target="#epr" 
                        type="button" 
                        role="tab" 
                        aria-controls="epr" 
                        aria-selected="@(activeTab == "epr" ? "true" : "false")"
                        @(!isQuotationCompleted ? "disabled" : "")>
                    <i class="fas fa-file-contract me-1"></i> 2. Raise ePR Phase
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "work" ? "active" : "") @(!isEprCompleted ? "disabled" : "")" 
                        id="work-tab" 
                        data-bs-toggle="tab" 
                        data-bs-target="#work" 
                        type="button" 
                        role="tab" 
                        aria-controls="work" 
                        aria-selected="@(activeTab == "work" ? "true" : "false")"
                        @(!isEprCompleted ? "disabled" : "")>
                    <i class="fas fa-tools me-1"></i> 3. Work Execution Phase
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "summary" ? "active" : "") @(!isWorkCompleted ? "disabled" : "")" 
                        id="summary-tab" 
                        data-bs-toggle="tab" 
                        data-bs-target="#summary" 
                        type="button" 
                        role="tab" 
                        aria-controls="summary" 
                        aria-selected="@(activeTab == "summary" ? "true" : "false")"
                        @(!isWorkCompleted ? "disabled" : "")>
                    <i class="fas fa-clipboard-check me-1"></i> 4. Summary
                </button>
            </li>
        </ul>
    </div>
</div>

<!-- Phase Tab Content -->
<div class="tab-content" id="phasesContent">
    <!-- Quotation Phase Tab -->
    <div class="tab-pane fade @(activeTab == "quotation" ? "show active" : "")" id="quotation" role="tabpanel" aria-labelledby="quotation-tab">
        <div class="card border-primary mb-4 shadow-sm">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="fas fa-file-invoice-dollar me-2"></i> Quotation Phase</h5>
                <span class="badge bg-light text-primary">Step 1 of 3</span>
            </div>
            <div class="card-body">
                <!-- Status indicator -->
                <div class="mb-4">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="text-primary mb-0">Phase Status</h6>
                        <span class="badge @(Model.QuoteCompleteDate.HasValue ? "bg-success" : "bg-secondary")">
                            @(Model.QuoteCompleteDate.HasValue ? "Completed" : "In Progress")
                        </span>
                    </div>
                    <div class="progress" style="height: 8px;">
                        @{
                            int progressPercentage = 0;
                            if (Model.QuoteSubmitDate.HasValue) { progressPercentage = 25; }
                            if (Model.QuoteDate.HasValue) { progressPercentage = 50; }
                            if (!string.IsNullOrEmpty(Model.QuoteUserAssign)) { progressPercentage = 75; }
                            if (Model.QuoteCompleteDate.HasValue) { progressPercentage = 100; }
                        }
                        <div class="progress-bar bg-primary" role="progressbar" style="width: @progressPercentage%;" 
                             aria-valuenow="@progressPercentage" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                </div>
                
                @using (Html.BeginForm("UpdateQuotation", "PlantMonitoring", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.Id)
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="quoteDate">Quotation Date</label>
                                <input type="datetime-local" class="form-control" id="quoteDate" name="QuoteDate" 
                                       value="@(Model.QuoteDate?.ToString("yyyy-MM-ddTHH:mm") ?? "")">
                            </div>
                            <div class="form-group">
                                <label for="quoteSubmitDate">Submit Date</label>
                                <input type="datetime-local" class="form-control" id="quoteSubmitDate" name="QuoteSubmitDate" 
                                       value="@(Model.QuoteSubmitDate?.ToString("yyyy-MM-ddTHH:mm") ?? "")">
                            </div>
                            <div class="form-group">
                                <label for="quoteCompleteDate">Complete Date</label>
                                <input type="datetime-local" class="form-control" id="quoteCompleteDate" name="QuoteCompleteDate" 
                                       value="@(Model.QuoteCompleteDate?.ToString("yyyy-MM-ddTHH:mm") ?? "")">
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label class="form-label">Assigned To</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-user"></i></span>
                                    @if (isAdmin)
                                    {
                                        @Html.DropDownList("QuoteUserAssign", (SelectList)ViewBag.UsersList, new { @class = "form-control", required = "required" })
                                    }
                                    else
                                    {
                                        <input type="text" name="QuoteUserAssign" value="@(string.IsNullOrEmpty(Model.QuoteUserAssign) ? currentUser : Model.QuoteUserAssign)" class="form-control" readonly />
                                    }
                                </div>
                                <div class="invalid-feedback">Please assign someone to this phase.</div>
                            </div>
                            
                            <div class="form-group mb-3">
                                <label class="form-label">Document</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-file-upload"></i></span>
                                    <input type="file" name="quoteDocument" class="form-control file-upload" accept=".pdf,.doc,.docx,.xls,.xlsx,.txt,.jpg,.jpeg,.png" data-max-size="20" />
                                </div>
                                <small class="form-text text-muted">Max file size: 20MB</small>
                                @if (!string.IsNullOrEmpty(Model.QuoteDoc))
                                {
                                    <div class="mt-2 p-2 bg-light rounded d-flex align-items-center">
                                        <i class="fas fa-file-pdf text-danger me-2"></i>
                                        <a href="@Url.Content(Model.QuoteDoc)" target="_blank" class="text-decoration-none">
                                            View Current Document
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <small class="text-muted"><i class="fas fa-info-circle me-1"></i> Complete this phase to proceed</small>
                        <div>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-1"></i> Save
                            </button>
                            @if (isQuotationCompleted)
                            {
                                <button type="button" class="btn btn-success ms-2" onclick="activateTab('epr-tab')">
                                    <i class="fas fa-arrow-right me-1"></i> Next Phase
                                </button>
                            }
                        </div>
                    </div>
                }
            </div>
            
            @if (isQuotationCompleted)
            {
                <div class="card-footer bg-success bg-opacity-10 text-success">
                    <i class="fas fa-check-circle me-1"></i> Completed on @Model.QuoteCompleteDate.Value.ToString("MMM dd, yyyy")
                </div>
            }
        </div>
    </div>

    <!-- ePR Phase Tab -->
    <div class="tab-pane fade @(activeTab == "epr" ? "show active" : "")" id="epr" role="tabpanel" aria-labelledby="epr-tab">
        <div class="card border-warning mb-4 shadow-sm">
            <div class="card-header bg-warning text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="fas fa-file-contract me-2"></i> Raise ePR Phase</h5>
                <span class="badge bg-light text-warning">Step 2 of 3</span>
            </div>
            <div class="card-body">
                @if (!isQuotationCompleted)
                {
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i> You must complete the Quotation Phase before proceeding to the ePR Phase.
                    </div>
                }
                else
                {
                    <!-- Status indicator -->
                    <div class="mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="text-warning mb-0">Phase Status</h6>
                            <span class="badge @(Model.EprCompleteDate.HasValue ? "bg-success" : "bg-secondary")">
                                @(Model.EprCompleteDate.HasValue ? "Completed" : "In Progress")
                            </span>
                        </div>
                        <div class="progress" style="height: 8px;">
                            @{
                                int eprProgressPercentage = 0;
                                if (Model.EprSubmitDate.HasValue) { eprProgressPercentage = 25; }
                                if (Model.EprDate.HasValue) { eprProgressPercentage = 50; }
                                if (!string.IsNullOrEmpty(Model.EprUserAssign)) { eprProgressPercentage = 75; }
                                if (Model.EprCompleteDate.HasValue) { eprProgressPercentage = 100; }
                            }
                            <div class="progress-bar bg-warning" role="progressbar" style="width: @eprProgressPercentage%;" 
                                aria-valuenow="@eprProgressPercentage" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </div>
                    
                    using (Html.BeginForm("UpdateEpr", "PlantMonitoring", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.Id)
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="eprDate">EPR Date</label>
                                    <input type="datetime-local" class="form-control" id="eprDate" name="EprDate" 
                                        value="@(Model.EprDate?.ToString("yyyy-MM-ddTHH:mm") ?? "")">
                                </div>
                                <div class="form-group">
                                    <label for="eprSubmitDate">Submit Date</label>
                                    <input type="datetime-local" class="form-control" id="eprSubmitDate" name="EprSubmitDate" 
                                        value="@(Model.EprSubmitDate?.ToString("yyyy-MM-ddTHH:mm") ?? "")">
                                </div>
                                <div class="form-group">
                                    <label for="eprCompleteDate">Complete Date</label>
                                    <input type="datetime-local" class="form-control" id="eprCompleteDate" name="EprCompleteDate" 
                                        value="@(Model.EprCompleteDate?.ToString("yyyy-MM-ddTHH:mm") ?? "")">
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">Assigned To</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-user"></i></span>
                                        @if (isAdmin)
                                        {
                                            @Html.DropDownList("EprUserAssign", (SelectList)ViewBag.UsersList, new { @class = "form-control", required = "required" })
                                        }
                                        else
                                        {
                                            <input type="text" name="EprUserAssign" value="@(string.IsNullOrEmpty(Model.EprUserAssign) ? currentUser : Model.EprUserAssign)" class="form-control" readonly />
                                        }
                                    </div>
                                    <div class="invalid-feedback">Please assign someone to this phase.</div>
                                </div>
                                
                                <div class="form-group mb-3">
                                    <label class="form-label">Document</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-file-upload"></i></span>
                                        <input type="file" name="eprDocument" class="form-control file-upload" accept=".pdf,.doc,.docx,.xls,.xlsx,.txt,.jpg,.jpeg,.png" data-max-size="20" />
                                    </div>
                                    <small class="form-text text-muted">Max file size: 20MB</small>
                                    @if (!string.IsNullOrEmpty(Model.EprDoc))
                                    {
                                        <div class="mt-2 p-2 bg-light rounded d-flex align-items-center">
                                            <i class="fas fa-file-pdf text-danger me-2"></i>
                                            <a href="@Url.Content(Model.EprDoc)" target="_blank" class="text-decoration-none">
                                                View Current Document
                                            </a>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <small class="text-muted"><i class="fas fa-info-circle me-1"></i> Complete this phase to proceed</small>
                            <div>
                                <button type="button" class="btn btn-secondary" onclick="activateTab('quotation-tab')">
                                    <i class="fas fa-arrow-left me-1"></i> Back
                                </button>
                                <button type="submit" class="btn btn-warning ms-2">
                                    <i class="fas fa-save me-1"></i> Save
                                </button>
                                @if (isEprCompleted)
                                {
                                    <button type="button" class="btn btn-success ms-2" onclick="activateTab('work-tab')">
                                        <i class="fas fa-arrow-right me-1"></i> Next Phase
                                    </button>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
            
            @if (isEprCompleted)
            {
                <div class="card-footer bg-success bg-opacity-10 text-success">
                    <i class="fas fa-check-circle me-1"></i> Completed on @Model.EprCompleteDate.Value.ToString("MMM dd, yyyy")
                </div>
            }
        </div>
    </div>

    <!-- Work Execution Phase Tab -->
    <div class="tab-pane fade @(activeTab == "work" ? "show active" : "")" id="work" role="tabpanel" aria-labelledby="work-tab">
        <div class="card border-success mb-4 shadow-sm">
            <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="fas fa-tools me-2"></i> Work Execution Phase</h5>
                <span class="badge bg-light text-success">Step 3 of 3</span>
            </div>
            <div class="card-body">
                @if (!isEprCompleted)
                {
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i> You must complete the ePR Phase before proceeding to the Work Execution Phase.
                    </div>
                }
                else
                {
                    <!-- Status indicator -->
                    <div class="mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="text-success mb-0">Phase Status</h6>
                            <span class="badge @(Model.WorkCompleteDate.HasValue ? "bg-success" : "bg-secondary")">
                                @(Model.WorkCompleteDate.HasValue ? "Completed" : "In Progress")
                            </span>
                        </div>
                        <div class="progress" style="height: 8px;">
                            @{
                                int workProgressPercentage = 0;
                                if (Model.WorkSubmitDate.HasValue) { workProgressPercentage = 25; }
                                if (Model.WorkDate.HasValue) { workProgressPercentage = 50; }
                                if (!string.IsNullOrEmpty(Model.WorkUserAssign)) { workProgressPercentage = 75; }
                                if (Model.WorkCompleteDate.HasValue) { workProgressPercentage = 100; }
                            }
                            <div class="progress-bar bg-success" role="progressbar" style="width: @workProgressPercentage%;" 
                                aria-valuenow="@workProgressPercentage" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </div>
                    
                    using (Html.BeginForm("UpdateWork", "PlantMonitoring", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.Id)
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="workDate">Work Date</label>
                                    <input type="datetime-local" class="form-control" id="workDate" name="WorkDate" 
                                        value="@(Model.WorkDate?.ToString("yyyy-MM-ddTHH:mm") ?? "")">
                                </div>
                                <div class="form-group">
                                    <label for="workSubmitDate">Submit Date</label>
                                    <input type="datetime-local" class="form-control" id="workSubmitDate" name="WorkSubmitDate" 
                                        value="@(Model.WorkSubmitDate?.ToString("yyyy-MM-ddTHH:mm") ?? "")">
                                </div>
                                <div class="form-group">
                                    <label for="workCompleteDate">Complete Date</label>
                                    <input type="datetime-local" class="form-control" id="workCompleteDate" name="WorkCompleteDate" 
                                        value="@(Model.WorkCompleteDate?.ToString("yyyy-MM-ddTHH:mm") ?? "")">
                                    <small class="form-text text-muted">When completed, renewal date will be set based on monitoring frequency.</small>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">Assigned To</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-user"></i></span>
                                        @if (isAdmin)
                                        {
                                            @Html.DropDownList("WorkUserAssign", (SelectList)ViewBag.UsersList, new { @class = "form-control", required = "required" })
                                        }
                                        else
                                        {
                                            <input type="text" name="WorkUserAssign" value="@(string.IsNullOrEmpty(Model.WorkUserAssign) ? currentUser : Model.WorkUserAssign)" class="form-control" readonly />
                                        }
                                    </div>
                                    <div class="invalid-feedback">Please assign someone to this phase.</div>
                                </div>
                                
                                <div class="form-group mb-3">
                                    <label class="form-label">Document</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-file-upload"></i></span>
                                        <input type="file" name="workDocument" class="form-control file-upload" accept=".pdf,.doc,.docx,.xls,.xlsx,.txt,.jpg,.jpeg,.png" data-max-size="20" />
                                    </div>
                                    <small class="form-text text-muted">Max file size: 20MB</small>
                                    @if (!string.IsNullOrEmpty(Model.WorkDoc))
                                    {
                                        <div class="mt-2 p-2 bg-light rounded d-flex align-items-center">
                                            <i class="fas fa-file-pdf text-danger me-2"></i>
                                            <a href="@Url.Content(Model.WorkDoc)" target="_blank" class="text-decoration-none">
                                                View Current Document
                                            </a>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <small class="text-muted"><i class="fas fa-info-circle me-1"></i> Complete this phase to finalize the monitoring</small>
                            <div>
                                <button type="button" class="btn btn-secondary" onclick="activateTab('epr-tab')">
                                    <i class="fas fa-arrow-left me-1"></i> Back
                                </button>
                                <button type="submit" class="btn btn-success ms-2">
                                    <i class="fas fa-save me-1"></i> Save
                                </button>
                                @if (isWorkCompleted)
                                {
                                    <button type="button" class="btn btn-info ms-2" onclick="activateTab('summary-tab')">
                                        <i class="fas fa-clipboard-check me-1"></i> View Summary
                                    </button>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
            
            @if (isWorkCompleted)
            {
                <div class="card-footer bg-success bg-opacity-10 text-success">
                    <i class="fas fa-check-circle me-1"></i> Completed on @Model.WorkCompleteDate.Value.ToString("MMM dd, yyyy")
                </div>
            }
        </div>
    </div>

    <!-- Summary Tab -->
    <div class="tab-pane fade @(activeTab == "summary" ? "show active" : "")" id="summary" role="tabpanel" aria-labelledby="summary-tab">
        <div class="card border-info mb-4">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">Monitoring Summary</h5>
            </div>
            <div class="card-body">
                @if (!isWorkCompleted)
                {
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i> You must complete the Work Execution Phase to view the summary.
                    </div>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-12">
                            <div class="alert alert-success">
                                <i class="fas fa-check-circle me-2"></i> All phases have been completed successfully!
                            </div>
                            
                            <div class="table-responsive">
                                <table class="table table-bordered">
                                    <tbody>
                                        <tr>
                                            <th colspan="3" class="bg-primary text-white">Quotation Phase</th>
                                        </tr>
                                        <tr>
                                            <th style="width: 33%">Submit Date</th>
                                            <th style="width: 33%">Completion Date</th>
                                            <th style="width: 33%">Assigned To</th>
                                        </tr>
                                        <tr>
                                            <td>@(Model.QuoteSubmitDate.HasValue ? Model.QuoteSubmitDate.Value.ToString("yyyy-MM-dd") : "N/A")</td>
                                            <td>@(Model.QuoteCompleteDate.HasValue ? Model.QuoteCompleteDate.Value.ToString("yyyy-MM-dd") : "N/A")</td>
                                            <td>@Model.QuoteUserAssign</td>
                                        </tr>
                                        
                                        <tr>
                                            <th colspan="3" class="bg-warning text-white">ePR Phase</th>
                                        </tr>
                                        <tr>
                                            <th>Submit Date</th>
                                            <th>Completion Date</th>
                                            <th>Assigned To</th>
                                        </tr>
                                        <tr>
                                            <td>@(Model.EprSubmitDate.HasValue ? Model.EprSubmitDate.Value.ToString("yyyy-MM-dd") : "N/A")</td>
                                            <td>@(Model.EprCompleteDate.HasValue ? Model.EprCompleteDate.Value.ToString("yyyy-MM-dd") : "N/A")</td>
                                            <td>@Model.EprUserAssign</td>
                                        </tr>
                                        
                                        <tr>
                                            <th colspan="3" class="bg-success text-white">Work Execution Phase</th>
                                        </tr>
                                        <tr>
                                            <th>Submit Date</th>
                                            <th>Completion Date</th>
                                            <th>Assigned To</th>
                                        </tr>
                                        <tr>
                                            <td>@(Model.WorkSubmitDate.HasValue ? Model.WorkSubmitDate.Value.ToString("yyyy-MM-dd") : "N/A")</td>
                                            <td>@(Model.WorkCompleteDate.HasValue ? Model.WorkCompleteDate.Value.ToString("yyyy-MM-dd") : "N/A")</td>
                                            <td>@Model.WorkUserAssign</td>
                                        </tr>
                                        
                                        <tr>
                                            <th colspan="3" class="bg-info text-white">Monitoring Information</th>
                                        </tr>
                                        <tr>
                                            <th>Next Expiry Date</th>
                                            <th>Current Status</th>
                                            <th>Remarks</th>
                                        </tr>
                                        <tr>
                                            <td>@(Model.ExpDate.HasValue ? Model.ExpDate.Value.ToString("yyyy-MM-dd") : "N/A")</td>
                                            <td><span class="badge @Model.ExpStatusCssClass">@Model.ExpStatus</span></td>
                                            <td>@Model.Remarks</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <a href="@Url.Action("Details", new { id = Model.Id })" class="btn btn-secondary" title="Back to Details">
                    <i class="fas fa-arrow-left"></i> Back to Details
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function() {
            // File size validation
            $('.file-upload').on('change', function() {
                var fileInput = $(this)[0];
                var maxSize = parseInt($(this).data('max-size')) * 1024 * 1024; // Convert MB to bytes
                
                if (fileInput.files.length > 0) {
                    var fileSize = fileInput.files[0].size; // in bytes
                    if (fileSize > maxSize) {
                        alert('File size exceeds the limit of 20MB. Please choose a smaller file.');
                        $(this).val(''); // Clear the file input
                        return false;
                    }
                }
            });

            // Date validation functions
            function validateQuotationDates() {
                var quoteDate = $('#quoteDate').val();
                var quoteSubmitDate = $('#quoteSubmitDate').val();
                var quoteCompleteDate = $('#quoteCompleteDate').val();

                // Set min date for submit date
                $('#quoteSubmitDate').attr('min', quoteDate || '');
                
                // Set min date for complete date
                $('#quoteCompleteDate').attr('min', quoteSubmitDate || quoteDate || '');

                // Validate submit date
                if (quoteSubmitDate && quoteDate && new Date(quoteSubmitDate) < new Date(quoteDate)) {
                    alert('Submit date cannot be earlier than start date');
                    $('#quoteSubmitDate').val('');
                }

                // Validate complete date
                if (quoteCompleteDate) {
                    var minDate = quoteSubmitDate || quoteDate;
                    if (minDate && new Date(quoteCompleteDate) < new Date(minDate)) {
                        alert('Complete date cannot be earlier than submit date or start date');
                        $('#quoteCompleteDate').val('');
                    }

                    // Auto-set EPR start date when quotation is completed
                    if (!eprDate.val()) {
                        eprDate.val(quoteCompleteDate);
                        validateEprDates();
                        // Show notification
                        showNotification('EPR date automatically set');
                    }
                }
            }

            function validateEprDates() {
                var eprDate = $('#eprDate').val();
                var eprSubmitDate = $('#eprSubmitDate').val();
                var eprCompleteDate = $('#eprCompleteDate').val();

                // Set min date for submit date
                $('#eprSubmitDate').attr('min', eprDate || '');
                
                // Set min date for complete date
                $('#eprCompleteDate').attr('min', eprSubmitDate || eprDate || '');

                // Validate submit date
                if (eprSubmitDate && eprDate && new Date(eprSubmitDate) < new Date(eprDate)) {
                    alert('Submit date cannot be earlier than start date');
                    $('#eprSubmitDate').val('');
                }

                // Validate complete date
                if (eprCompleteDate) {
                    var minDate = eprSubmitDate || eprDate;
                    if (minDate && new Date(eprCompleteDate) < new Date(minDate)) {
                        alert('Complete date cannot be earlier than submit date or start date');
                        $('#eprCompleteDate').val('');
                    }

                    // Auto-set Work start date when EPR is completed
                    if (!workDate.val()) {
                        workDate.val(eprCompleteDate);
                        validateWorkDates();
                        // Show notification
                        showNotification('Work date automatically set');
                    }
                }
            }

            function validateWorkDates() {
                var workDate = $('#workDate').val();
                var workSubmitDate = $('#workSubmitDate').val();
                var workCompleteDate = $('#workCompleteDate').val();

                // Set min date for submit date
                $('#workSubmitDate').attr('min', workDate || '');
                
                // Set min date for complete date
                $('#workCompleteDate').attr('min', workSubmitDate || workDate || '');

                // Validate submit date
                if (workSubmitDate && workDate && new Date(workSubmitDate) < new Date(workDate)) {
                    alert('Submit date cannot be earlier than start date');
                    $('#workSubmitDate').val('');
                }

                // Validate complete date
                if (workCompleteDate) {
                    var minDate = workSubmitDate || workDate;
                    if (minDate && new Date(workCompleteDate) < new Date(minDate)) {
                        alert('Complete date cannot be earlier than submit date or start date');
                        $('#workCompleteDate').val('');
                    }

                    // Auto-set expiry date when work is completed
                    if (!expDate.val()) {
                        // Expiry date is now set based on monitoring frequency in the controller
                        // But we can show a message about it
                        showNotification('Expiry date will be set based on frequency');
                    }
                }
            }
            
            // Function to show a notification
            function showNotification(message) {
                // Create notification element if it doesn't exist
                if ($('#auto-notification').length === 0) {
                    $('body').append('<div id="auto-notification" style="position: fixed; bottom: 20px; right: 20px; background-color: #28a745; color: white; padding: 10px 15px; border-radius: 4px; box-shadow: 0 4px 8px rgba(0,0,0,0.2); z-index: 9999; display: none;"></div>');
                }
                
                // Show notification with message
                $('#auto-notification').text(message).fadeIn(300).delay(3000).fadeOut(500);
            }

            // Cache date input elements
            var quoteDate = $('#quoteDate');
            var eprDate = $('#eprDate');
            var workDate = $('#workDate');
            var expDate = $('#ExpDate');

            // Attach date validation events
            $('#quoteDate, #quoteSubmitDate, #quoteCompleteDate').on('change', validateQuotationDates);
            $('#eprDate, #eprSubmitDate, #eprCompleteDate').on('change', validateEprDates);
            $('#workDate, #workSubmitDate, #workCompleteDate').on('change', validateWorkDates);
            
            // Set up tab change listeners
            $('#phasesTabs button[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
                var targetTab = $(e.target).attr("id");
                
                // When switching to EPR tab
                if (targetTab === 'epr-tab') {
                    var quoteCompleteDate = $('#quoteCompleteDate').val();
                    if (quoteCompleteDate && !$('#eprDate').val()) {
                        $('#eprDate').val(quoteCompleteDate);
                        validateEprDates();
                        // No notification here - only on save
                    }
                }
                
                // When switching to Work tab
                if (targetTab === 'work-tab') {
                    var eprCompleteDate = $('#eprCompleteDate').val();
                    if (eprCompleteDate && !$('#workDate').val()) {
                        $('#workDate').val(eprCompleteDate);
                        validateWorkDates();
                        // No notification here - only on save
                    }
                }
            });

            // Form submission validation
            $('form').on('submit', function(e) {
                var isValid = true;
                
                // Validate file uploads
                $(this).find('.file-upload').each(function() {
                    var fileInput = $(this)[0];
                    var maxSize = parseInt($(this).data('max-size')) * 1024 * 1024;
                    
                    if (fileInput.files.length > 0) {
                        var fileSize = fileInput.files[0].size;
                        if (fileSize > maxSize) {
                            alert('File size exceeds the limit of 20MB. Please choose a smaller file.');
                            $(this).val('');
                            isValid = false;
                            return false;
                        }
                    }
                });
                
                // Validate assignee fields
                $(this).find('.assignee-field').each(function() {
                    if ($(this).val().trim() === '') {
                        if ($(this).closest('.card-body').find('input[type="datetime-local"]').filter(function() { 
                            return $(this).val() !== ''; 
                        }).length > 0) {
                            // Only validate if any date field in this section has a value
                            $(this).addClass('is-invalid');
                            isValid = false;
                        }
                    } else {
                        $(this).removeClass('is-invalid');
                    }
                });
                
                return isValid;
            });
            
            // Clear validation on input
            $('.assignee-field').on('input', function() {
                if ($(this).val().trim() !== '') {
                    $(this).removeClass('is-invalid');
                }
            });

            // Auto-fill dates on page load based on completed phases
            function autofillDatesOnLoad() {
                var quoteCompleteDate = $('#quoteCompleteDate').val();
                var eprDate = $('#eprDate').val();
                var eprCompleteDate = $('#eprCompleteDate').val();
                var workDate = $('#workDate').val();
                
                // If Quotation is completed and EPR date is empty, fill it
                if (quoteCompleteDate && !eprDate) {
                    $('#eprDate').val(quoteCompleteDate);
                    validateEprDates();
                    // No notification here - only on save
                }
                
                // If EPR is completed and Work date is empty, fill it
                if (eprCompleteDate && !workDate) {
                    $('#workDate').val(eprCompleteDate);
                    validateWorkDates();
                    // No notification here - only on save
                }
            }
            
            // Call autofill on page load
            autofillDatesOnLoad();

            // Set up notifications for auto-filled dates when a phase is saved
            @if (TempData["SuccessMessage"] != null)
            {
                <script>
                    // Check if dates were auto-filled
                    var autofillNotifications = [];
                    
                    @if (TempData["AutofillEPR"] != null)
                    {
                        <text>autofillNotifications.push('EPR date automatically set');</text>
                    }
                    
                    @if (TempData["AutofillWork"] != null)
                    {
                        <text>autofillNotifications.push('Work date automatically set');</text>
                    }
                    
                    // Show notifications with a slight delay after page load
                    $(document).ready(function() {
                        setTimeout(function() {
                            autofillNotifications.forEach(function(message, index) {
                                setTimeout(function() {
                                    showNotification(message);
                                }, index * 2000); // Stagger notifications by 2 seconds
                            });
                        }, 500);
                    });
                </script>
            }
        });
        
        // Function to activate a specific tab
        function activateTab(tabId) {
            $('#' + tabId).tab('show');
            
            // When switching to EPR tab, check if we should auto-fill the date
            if (tabId == 'epr-tab') {
                var quoteCompleteDate = $('#quoteCompleteDate').val();
                if (quoteCompleteDate && !$('#eprDate').val()) {
                    $('#eprDate').val(quoteCompleteDate);
                    validateEprDates();
                    // No notification here - only on save
                }
            }
            
            // When switching to Work tab, check if we should auto-fill the date
            if (tabId == 'work-tab') {
                var eprCompleteDate = $('#eprCompleteDate').val();
                if (eprCompleteDate && !$('#workDate').val()) {
                    $('#workDate').val(eprCompleteDate);
                    validateWorkDates();
                    // No notification here - only on save
                }
            }
        }
    </script>
} 
} 