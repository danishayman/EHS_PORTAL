@model IEnumerable<CLIP.Controllers.HomeController.PlantMachineCount>
@{
    ViewBag.Title = "Welcome to CLIP";
}

<div class="jumbotron text-center py-5 bg-light">
    <h1 class="display-4">Welcome to CLIP</h1>
    <h3 class="text-muted">Competency, Licensing and Important Permit Management System</h3>
</div>

<div class="container mt-5">
    <h1 class="text-center mb-4">CERTIFICATE OF FITNESS</h1>


    <div class="row mb-4">
        <div class="col-md-6 offset-md-3">
            <div class="card bg-secondary text-white shadow text-center">
                <div class="card-body">
                    <h5 class="card-title">Total Machines Tracked</h5>
                    <h2 class="display-3">@Model.Sum(m => m.MachineCount)</h2>
                    <p class="mb-0">Across @Model.Count() Plants</p>
                </div>
            </div>
        </div>
    </div>


    <div class="row mb-5">
        <div class="col-md-4 mb-3">
            <div class="card border-success shadow-sm h-100">
                <div class="card-body text-center">
                    <h1 class="display-1 text-success mb-3">@Model.Sum(m => m.ActiveCount)</h1>
                    <h5 class="text-success">Active Certificates</h5>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-3">
            <div class="card border-warning shadow-sm h-100">
                <div class="card-body text-center">
                    <h1 class="display-1 text-warning mb-3">@Model.Sum(m => m.ExpiringSoonCount)</h1>
                    <h5 class="text-warning">Expiring Soon</h5>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-3">
            <div class="card border-danger shadow-sm h-100">
                <div class="card-body text-center">
                    <h1 class="display-1 text-danger mb-3">@Model.Sum(m => m.ExpiredCount)</h1>
                    <h5 class="text-danger">Expired Certificates</h5>
                </div>
            </div>
        </div>



        <div class="row">
            <div class="col-xl-6 mb-4">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <i class="fas fa-chart-bar fa-fw me-1"></i>
                        Machine Count by Plant
                    </div>
                    <div class="card-body">
                        <canvas id="plantMachineChart" height="300"></canvas>
                    </div>
                </div>
            </div>

            <div class="col-xl-6 mb-4">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <i class="fas fa-chart-pie fa-fw me-1"></i>
                        Machine Status Distribution
                    </div>
                    <div class="card-body">
                        <canvas id="statusPieChart" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>


    </div>
</div>


<div class="row mt-4 mb-5">
    <div class="col-md-6 offset-md-3 text-center">
        <div class="card shadow-sm">
            <div class="card-body">
                <h2 class="card-title">Get Started</h2>
                <p class="card-text">
                    Please log in to access the system.
                </p>
                <div class="d-grid gap-2 col-8 mx-auto mt-4">
                    @Html.ActionLink("Log in", "Login", "Account", null, new { @class = "btn btn-primary btn-lg mb-3" })
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js"
        integrity="sha512-fD9DI5bZwQxOi7MhYWnnNPlvXdp/2Pj3XSTRrFs5FQa4mizyGLnJcN6tuvUS6LbmgN1ut+XGSABKvjN0H6Aoow=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        // Register ChartDataLabels plugin
        Chart.register(ChartDataLabels);

        // Data from the model - original unordered data
        var originalPlantNames = [@Html.Raw(string.Join(",", Model.Select(m => "'" + m.PlantName + "'")))];
        var originalMachineCounts = [@string.Join(",", Model.Select(m => m.MachineCount))];
        var originalActiveData = [@string.Join(",", Model.Select(m => m.ActiveCount))];
        var originalExpiringSoonData = [@string.Join(",", Model.Select(m => m.ExpiringSoonCount))];
        var originalExpiredData = [@string.Join(",", Model.Select(m => m.ExpiredCount))];

        // Define custom order
        var customOrder = ["Plant 1", "Plant 3", "Plant 5", "Plant 13", "Plant 55", "Plant 21", "Plant 34"];

        // Reorder data according to custom order
        var plantNames = [];
        var machineCounts = [];
        var activeData = [];
        var expiringSoonData = [];
        var expiredData = [];

        // Map original data to the custom order
        customOrder.forEach(function (plantName) {
            var index = originalPlantNames.indexOf(plantName);
            if (index !== -1) {
                plantNames.push(originalPlantNames[index]);
                machineCounts.push(originalMachineCounts[index]);
                activeData.push(originalActiveData[index]);
                expiringSoonData.push(originalExpiringSoonData[index]);
                expiredData.push(originalExpiredData[index]);
            }
        });

        // Total counts for the pie chart
        var totalActive = @Model.Sum(m => m.ActiveCount);
        var totalExpiringSoon = @Model.Sum(m => m.ExpiringSoonCount);
        var totalExpired = @Model.Sum(m => m.ExpiredCount);

        // Set up chart colors
        var activeColor = 'rgba(40, 167, 69, 0.7)';
        var expiringSoonColor = 'rgba(255, 193, 7, 0.7)';
        var expiredColor = 'rgba(220, 53, 69, 0.7)';

        // Create bar chart showing machine counts by plant
        var plantMachineCtx = document.getElementById('plantMachineChart').getContext('2d');
        var plantMachineChart = new Chart(plantMachineCtx, {
            type: 'bar',
            data: {
                labels: plantNames,
                datasets: [
                    {
                        label: 'Active',
                        data: activeData,
                        backgroundColor: activeColor,
                        borderColor: 'rgba(40, 167, 69, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'Expiring Soon',
                        data: expiringSoonData,
                        backgroundColor: expiringSoonColor,
                        borderColor: 'rgba(255, 193, 7, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'Expired',
                        data: expiredData,
                        backgroundColor: expiredColor,
                        borderColor: 'rgba(220, 53, 69, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        stacked: true,
                    },
                    y: {
                        stacked: true,
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1,
                            precision: 0
                        }
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Certificate of Fitness by Plant'
                    },
                    legend: {
                        position: 'bottom'
                    },
                    tooltip: {
                        callbacks: {
                            footer: function (tooltipItems) {
                                let total = 0;
                                tooltipItems.forEach(function (tooltipItem) {
                                    const index = tooltipItem.dataIndex;
                                    // Get value from all datasets for this index
                                    plantMachineChart.data.datasets.forEach(function (dataset) {
                                        total += dataset.data[index] || 0;
                                    });
                                });
                                return 'Total: ' + total;
                            }
                        }
                    },
                    datalabels: {
                        color: '#6E6E6E',
                        font: {
                            weight: 'bold'
                        },
                        formatter: function (value, context) {
                            // Only show labels for the last dataset in stack
                            if (context.datasetIndex !== context.chart.data.datasets.length - 1) {
                                return null;
                            }

                            // Calculate total from all datasets for this index
                            const index = context.dataIndex;
                            let total = 0;
                            context.chart.data.datasets.forEach(function (dataset) {
                                total += dataset.data[index] || 0;
                            });
                            return total;
                        },
                        anchor: 'end',
                        align: 'top',
                        offset: 0
                    }
                }
            }
        });

        // Create pie chart showing status distribution
        var statusPieCtx = document.getElementById('statusPieChart').getContext('2d');
        var statusPieChart = new Chart(statusPieCtx, {
            type: 'pie',
            data: {
                labels: ['Active', 'Expiring Soon', 'Expired'],
                datasets: [{
                    data: [totalActive, totalExpiringSoon, totalExpired],
                    backgroundColor: [activeColor, expiringSoonColor, expiredColor],
                    borderColor: ['rgba(40, 167, 69, 1)', 'rgba(255, 193, 7, 1)', 'rgba(220, 53, 69, 1)'],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    },
                    title: {
                        display: true,
                        text: 'Certificate of Fitness Status Distribution'
                    },
                    datalabels: {
                        color: '#fff',
                        font: {
                            weight: 'bold'
                        },
                        formatter: function (value, context) {
                            return value > 0 ? value : '';
                        }
                    }
                }
            }
        });
    </script>
}